class Solution {
    public int amountOfTime(TreeNode root, int start) {
       HashMap<TreeNode , TreeNode> map = new HashMap<>();
       Queue<TreeNode> q = new LinkedList<>();
       preorder(root, map);
       TreeNode node = getStart(root,start);
       q.add(node);
       HashMap<TreeNode , Integer> visite = new HashMap<>();
       visite.put(node, 0);

       while(q.size() > 0){
         TreeNode curr =   q.remove();
         int level = visite.get(curr);
         if(curr.left != null && !visite.containsKey(curr.left)){
             q.add(curr.left);
             visite.put(curr.left, level+1);
         }
         if(curr.right != null && !visite.containsKey(curr.right)){
             q.add(curr.right);
             visite.put(curr.right, level+1);
         }
         if(map.containsKey(curr) && !visite.containsKey(map.get(curr))){
             q.add(map.get(curr));
             visite.put(map.get(curr), level+1);
         }
       
       }
       int max = -1;
       for(int ans : visite.values()){
                max = Math.max(max, ans);
       }
       return max;
    }
    public void preorder(TreeNode root, HashMap<TreeNode, TreeNode> map){
        if(root == null){
            return;
        }
        if(root.left != null){
            map.put(root.left, root);
        }
        if(root.right != null){
            map.put(root.right, root);
    }
    preorder(root.left, map);
    preorder(root.right , map);

    }
    public TreeNode getStart(TreeNode root, int start){
        if(root == null){
            return null;
        }
        if(root.val == start){
            return root;
        }
        TreeNode left = getStart(root.left, start);
        TreeNode right = getStart(root.right, start);
        if(left == null){
            return right;
        }
        else{
            return left;
        }

    }
}
